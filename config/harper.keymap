#undef ZMK_BEHAVIORS_KEEP_ALL

#define ZMK_BEHAVIORS_KEEP_IND
#define ZMK_BEHAVIORS_KEEP_BT
#define ZMK_BEHAVIORS_KEEP_GRESC
#define ZMK_BEHAVIORS_KEEP_SYS_RESET
#define ZMK_BEHAVIORS_KEEP_BOOTLOADER
#define ZMK_BEHAVIORS_KEEP_CAPS_WORD
#define ZMK_BEHAVIORS_KEEP_KEY_REPEAT
#define ZMK_BEHAVIORS_KEEP_KT
#define ZMK_BEHAVIORS_KEEP_LT
#define ZMK_BEHAVIORS_KEEP_MT
#define ZMK_BEHAVIORS_KEEP_SK
#define ZMK_BEHAVIORS_KEEP_STICKY_LAYER
#define ZMK_BEHAVIORS_KEEP_TO
#define ZMK_BEHAVIORS_KEEP_TOG
#define ZMK_BEHAVIORS_KEEP_TRANS

#include <dt-bindings/zmk/indicators.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

/ {
    combos {
        compatible = "zmk,combos";

        TabJumpLeft {
            bindings = <&kp LS(LG(LEFT_BRACKET))>;
            key-positions = <31 32>;
        };

        TabJumpRight {
            bindings = <&kp LS(LG(RIGHT_BRACKET))>;
            key-positions = <33 34>;
        };

        WorkspaceJumpLeft {
            bindings = <&kp LC(LEFT)>;
            key-positions = <25 26>;
        };

        WorkspaceJumpRight {
            bindings = <&kp LC(RIGHT)>;
            key-positions = <27 28>;
        };

        LeftArrow {
            bindings = <&kp LEFT>;
            key-positions = <13 14>;
        };

        RightArrow {
            bindings = <&kp RIGHT>;
            key-positions = <15 16>;
        };

        UpArrow {
            bindings = <&kp UP_ARROW>;
            key-positions = <19 20>;
        };

        DownArrow {
            bindings = <&kp DOWN_ARROW>;
            key-positions = <21 22>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESCAPE  &kp N1           &kp N2     &kp N3        &kp N4        &kp N5         &kp N6                     &kp N7                    &kp N8     &kp N9        &kp N0     &kp BACKSPACE
&kp GRAVE   &kp Q            &kp W      &kp E         &kp R         &kp T          &kp Y                      &kp U                     &kp I      &kp O         &kp P      &kp LEFT_BRACKET
&kp TAB     &kp A            &kp S      &kp D         &kp F         &kp G          &kp H                      &kp J                     &kp K      &kp L         &kp SEMI   &kp SQT
&kp LSHFT   &kp Z            &kp X      &kp C         &kp V         &kp B          &mo 3                      &mo 3                     &kp N      &kp M         &kp COMMA  &kp DOT
&kp FSLH    &kp RIGHT_SHIFT  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI  &mo 2   &mo 1  &kp SPACE                  &kp LS(LA(LC(LEFT_GUI)))  &kp ENTER  &kp LEFT_GUI  &mo 1      &mo 2             &kp LS(LG(LEFT_BRACKET))
                                                                                   &kp LS(LG(RIGHT_BRACKET))                                                                                  &kp RIGHT_BRACKET
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_DN C_VOL_UP>,
                <&inc_dec_kp LC(LEFT_ARROW) LC(RIGHT)>;
        };

        num_layer {
            bindings = <
&kp ESCAPE  &kp F1     &kp F2        &kp F3        &kp F4            &kp F5                &kp F6         &kp F7        &kp F8          &kp F9        &kp F10          &kp F11
&kp GRAVE   &kp MINUS  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9      &kp AMPERSAND         &none          &none         &none           &none         &none            &kp F12
&kp TAB     &kp EXCL   &kp NUMBER_4  &kp N5        &kp NUMBER_6      &kp NUMBER_0          &none          &kp LEFT_GUI  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp LCTRL        &none
&kp LSHFT   &kp EQUAL  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3      &kp UNDER             &kp C_MUTE     &none         &none           &kp PIPE      &kp KP_MULTIPLY  &kp KP_DIVIDE
&kp SLASH   &kp RSHFT  &kp LCTRL     &kp LEFT_ALT  &kp LEFT_COMMAND  &mo 2          &mo 1  &kp SPACE      &none         &kp ENTER       &kp LEFT_GUI  &mo 1            &mo 2          &kp LC(LEFT)
                                                                                           &kp LC(RIGHT)                                                                              &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &scroll_l_r>;
        };

        raise_layer {
            bindings = <
&none       &none    &none              &none              &none             &none               &none           &none         &none         &none          &none              &out OUT_TOG
&none       &kp INS  &kp LA(LC(LS(W)))  &kp LA(LC(LS(R)))  &kp LC(LS(R))     &kp LA(F12)         &none           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &none              &none
&none       &none    &kp LG(X)          &kp LG(C)          &kp LG(P)         &kp LG(A)           &kp LEFT_ARROW  &kp DOWN      &kp UP_ARROW  &kp RIGHT      &kp DEL            &kp BSPC
&kp LSHIFT  &none    &none              &kp LG(LS(Z))      &kp LG(Z)         &none               &none           &none         &none         &kp LS(LG(J))  &kp LS(LG(LA(J)))  &none
&none       &none    &kp LCTRL          &kp LEFT_ALT       &kp LEFT_COMMAND  &mo 2        &mo 1  &kp SPACE       &none         &kp ENTER     &kp LEFT_GUI   &mo 1              &mo 2         &kp LC(LEFT)
                                                                                                 &kp LC(RIGHT)                                                                               &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW &inc_dec_kp LEFT_ARROW RIGHT_ARROW>;
        };

        adjust_layer {
            bindings = <
&out OUT_BLE       &bt BT_SEL 0                     &bt BT_SEL 1                       &bt BT_SEL 2                      &bt BT_CLR                       &out OUT_USB                             &none           &none      &none         &none                     &none  &none
&rgb_ug RGB_TOG    &rgb_ug RGB_BRD                  &rgb_ug RGB_BRI                    &rgb_ug RGB_SPD                   &rgb_ug RGB_SPI                  &rgb_ug RGB_EFF                          &none           &none      &none         &none                     &none  &none
&ext_power EP_TOG  &rgb_ug RGB_COLOR_HSB(0,100,50)  &rgb_ug RGB_COLOR_HSB(218,100,50)  &rgb_ug RGB_COLOR_HSB(120,97,50)  &rgb_ug RGB_COLOR_HSB(60,0,100)  &rgb_ug RGB_COLOR_HSB(64,100,52)         &kp LEFT_ARROW  &kp DOWN   &kp UP_ARROW  &kp RIGHT                 &none  &none
&sys_reset         &bootloader                      &none                              &none                             &none                            &none                                    &none           &none      &none         &none                     &none  &none
&none              &none                            &kp LCTRL                          &kp LEFT_ALT                      &kp LCMD                         &mo 2                             &mo 1  &kp LEFT_GUI    &kp SPACE  &kp ENTER     &kp LS(LA(LC(LEFT_GUI)))  &mo 1  &mo 2  &kp RCMD
                                                                                                                                                                                                   &kp RIGHT_ALT                                                                    &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW &inc_dec_kp LEFT_ARROW RIGHT_ARROW>;
        };

        extra1 { status = "reserved"; };

        extra2 { status = "reserved"; };

        extra3 { status = "reserved"; };

        extra4 { status = "reserved"; };
    };
};
