#undef ZMK_BEHAVIORS_KEEP_ALL

#define ZMK_BEHAVIORS_KEEP_IND
#define ZMK_BEHAVIORS_KEEP_BT
#define ZMK_BEHAVIORS_KEEP_GRESC
#define ZMK_BEHAVIORS_KEEP_SYS_RESET
#define ZMK_BEHAVIORS_KEEP_BOOTLOADER
#define ZMK_BEHAVIORS_KEEP_CAPS_WORD
#define ZMK_BEHAVIORS_KEEP_KEY_REPEAT
#define ZMK_BEHAVIORS_KEEP_KT
#define ZMK_BEHAVIORS_KEEP_LT
#define ZMK_BEHAVIORS_KEEP_MT
#define ZMK_BEHAVIORS_KEEP_SK
#define ZMK_BEHAVIORS_KEEP_STICKY_LAYER
#define ZMK_BEHAVIORS_KEEP_TO
#define ZMK_BEHAVIORS_KEEP_TOG
#define ZMK_BEHAVIORS_KEEP_TRANS

#include <dt-bindings/zmk/indicators.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

/ {
    combos {
        compatible = "zmk,combos";

        TabJumpLeft {
            bindings = <&kp LS(LG(LEFT_BRACKET))>;
            key-positions = <31 32>;
        };

        TabJumpRight {
            bindings = <&kp LS(LG(RIGHT_BRACKET))>;
            key-positions = <33 32>;
        };

        WorkspaceJumpLeft {
            bindings = <&kp LC(LEFT)>;
            key-positions = <26 27>;
        };

        WorkspaceJumpRight {
            bindings = <&kp LC(RIGHT)>;
            key-positions = <27 28>;
        };

        LeftArrow {
            bindings = <&kp LEFT>;
            key-positions = <14 15>;
        };

        RightArrow {
            bindings = <&kp RIGHT>;
            key-positions = <15 16>;
        };

        UpArrow {
            bindings = <&kp UP_ARROW>;
            key-positions = <19 20>;
        };

        DownArrow {
            bindings = <&kp DOWN_ARROW>;
            key-positions = <21 20>;
        };

        HomerowAndAppJump {
            bindings = <&kp LS(LA(LC(LEFT_GUI)))>;
            key-positions = <31 32 33>;
        };

        ActivateScrollHomerow {
            bindings = <&kp LS(LG(J))>;
            key-positions = <28 26 27>;
        };

        Ampersand {
            bindings = <&kp AMPS>;
            key-positions = <45 44>;
        };

        Underscore {
            bindings = <&kp UNDER>;
            key-positions = <46 47>;
        };

        Minus {
            bindings = <&kp MINUS>;
            key-positions = <47 48>;
        };

        Pipe {
            bindings = <&kp PIPE>;
            key-positions = <33 34>;
        };

        Minus2 {
            bindings = <&kp MINUS>;
            key-positions = <40 39>;
        };

        Equals {
            bindings = <&kp EQUAL>;
            key-positions = <38 39>;
        };

        Plus {
            bindings = <&kp PLUS>;
            key-positions = <37 38>;
        };

        DollarSign {
            bindings = <&kp DOLLAR>;
            key-positions = <45 46>;
        };

        CmdRight {
            bindings = <&kp LEFT_GUI>;
            key-positions = <32 33 34>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp ESCAPE  &kp N1           &kp N2     &kp N3        &kp N4        &kp N5            &kp N6        &kp N7     &kp N8     &kp N9  &kp N0  &kp BACKSPACE
&kp GRAVE   &kp Q            &kp Y      &kp O         &kp U         &kp SEMI          &kp X         &kp L      &kp D      &kp W   &kp Z   &kp LEFT_BRACKET
&kp B       &kp C            &kp I      &kp E         &kp A         &kp COMMA         &kp K         &kp H      &kp T      &kp N   &kp S   &kp V
&kp LSHFT   &kp APOS         &kp MINUS  &kp EQUAL     &kp DOT       &kp SLASH         &mo 3         &mo 3      &kp J      &kp M   &kp G   &kp P
&kp F       &kp RIGHT_SHIFT  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_GUI  &none      &mo 2  &kp TAB       &kp SPACE  &kp ENTER  &kp R   &mo 1   &none             &bt BT_SEL 0
                                                                                      &bt BT_SEL 1                                                          &kp RIGHT_BRACKET
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_DN C_VOL_UP>,
                <&inc_dec_kp LC(LEFT_ARROW) LC(RIGHT)>;
        };

        num_layer {
            bindings = <
&kp ESCAPE  &kp F1     &kp F2        &kp F3        &kp F4            &kp F5                &kp F6         &kp F7        &kp F8          &kp F9        &kp F10          &kp BACKSPACE
&kp GRAVE   &kp MINUS  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9      &kp AMPERSAND         &none          &none         &none           &none         &none            &kp F12
&kp TAB     &kp EXCL   &kp NUMBER_4  &kp N5        &kp NUMBER_6      &kp NUMBER_0          &none          &kp LEFT_GUI  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp LCTRL        &none
&kp LSHFT   &kp EQUAL  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3      &kp UNDER             &kp C_MUTE     &none         &none           &kp PIPE      &kp KP_MULTIPLY  &kp KP_DIVIDE
&kp SLASH   &kp RSHFT  &kp LCTRL     &kp LEFT_ALT  &kp LEFT_COMMAND  &none          &none  &kp SPACE      &none         &none           &kp ENTER     &none            &none          &kp LC(LEFT)
                                                                                           &kp LC(RIGHT)                                                                              &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &scroll_l_r>;
        };

        nav_layer {
            bindings = <
&none       &none           &none              &none              &none             &none               &none           &none      &none             &none       &none          &kp BACKSPACE
&none       &kp INS         &kp LA(LC(LS(W)))  &kp LA(LC(LS(R)))  &kp LC(LS(R))     &kp LA(F12)         &kp LA(F7)      &kp LG(B)  &kp LG(UP_ARROW)  &none       &none          &none
&none       &none           &kp LG(X)          &kp LG(C)          &kp LG(V)         &kp LG(A)           &kp LEFT_ARROW  &kp DOWN   &kp UP_ARROW      &kp RIGHT   &kp DEL        &kp BSPC
&kp LSHIFT  &none           &none              &kp LG(LS(Z))      &kp LG(Z)         &none               &none           &none      &none             &kp LS(F6)  &kp LG(LA(M))  &none
&none       &kp LEFT_SHIFT  &kp LCTRL          &kp LEFT_ALT       &kp LEFT_COMMAND  &none        &none  &kp SPACE       &none      &none             &kp ENTER   &none          &none          &none
                                                                                                        &none                                                                                  &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW &inc_dec_kp LEFT_ARROW RIGHT_ARROW>;
        };

        adjust_layer {
            bindings = <
&out OUT_BLE       &bt BT_SEL 0                     &bt BT_SEL 1                       &bt BT_SEL 2                      &bt BT_CLR                       &out OUT_USB                             &none           &none      &none         &none                     &none  &none
&rgb_ug RGB_TOG    &rgb_ug RGB_BRD                  &rgb_ug RGB_BRI                    &rgb_ug RGB_SPD                   &rgb_ug RGB_SPI                  &rgb_ug RGB_EFF                          &none           &none      &none         &none                     &none  &none
&ext_power EP_TOG  &rgb_ug RGB_COLOR_HSB(0,100,50)  &rgb_ug RGB_COLOR_HSB(218,100,50)  &rgb_ug RGB_COLOR_HSB(120,97,50)  &rgb_ug RGB_COLOR_HSB(60,0,100)  &rgb_ug RGB_COLOR_HSB(64,100,52)         &kp LEFT_ARROW  &kp DOWN   &kp UP_ARROW  &kp RIGHT                 &none  &none
&sys_reset         &bootloader                      &none                              &none                             &none                            &none                                    &none           &none      &none         &none                     &none  &none
&none              &none                            &kp LCTRL                          &kp LEFT_ALT                      &kp LCMD                         &mo 2                             &mo 1  &kp LEFT_GUI    &kp SPACE  &kp ENTER     &kp LS(LA(LC(LEFT_GUI)))  &mo 1  &mo 2  &kp RCMD
                                                                                                                                                                                                   &kp RIGHT_ALT                                                                    &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW &inc_dec_kp LEFT_ARROW RIGHT_ARROW>;
        };

        layer_8 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                                        &trans                                          &trans
            >;
        };

        extra1 { status = "reserved"; };

        extra2 { status = "reserved"; };

        extra3 { status = "reserved"; };

        extra4 { status = "reserved"; };
    };
};
